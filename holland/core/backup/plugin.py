"""
    holland.core.backup.plugin
    ~~~~~~~~~~~~~~~~~~~~~~~~~~

    The Holland BackupPlugin base class that all backup plugins should derive
    from.

    :copyright: 2010-2011 Rackspace US, Inc.
    :license: BSD, see LICENSE.rst for details
"""

import logging
from holland.core.plugin import ConfigurablePlugin
from holland.core.config import Configspec

LOG = logging.getLogger(__name__)

class BackupPlugin(ConfigurablePlugin):
    """Interface that Holland Backup Plugins should conform to"""

    #: holland backup plugins are always registered under the namespace
    #: "holland.backup"
    namespace = 'holland.backup'

    #: BackupStore instance provides via the setup() method
    store = None

    #: Convenience alias to ``store.path`` -- the backup directory where
    #: backup data should be stored by a plugin
    backup_directory = None

    def setup(self, backupstore):
        """Setup the backup directory

        A ``BackupStore`` instance is provided to the plugin whose
        ``path`` instance points to the directory where backup files
        should be stored.

        By default this instance sets a ``backup_directory`` attribute
        on this instance.
        """
        self.store = backupstore
        self.backup_directory = self.store.path

    def pre(self):
        """Run before starting a backup

        This is largely useful to setup resources shared by estimate()
        and backup() to avoid recalculation and/or messier setup in
        the estimate() method
        """

    def estimate(self):
        """Estimate the size of the backup this plugin would produce

        :returns: int -- total number of bytes estimated to be generated
                         by the backup files generated by this plugin given
                         the current config
        """
        return 0

    def backup(self):
        """Perform a backup operation

        Backup files should be stored under ``self.backup_directory``

        If a backup fails, a ``BackupError`` instance should be raised

        :raises: BackupError
        """

    def dryrun(self):
        """Perform a dry-run of the backup process

        This method should avoid doing anyting particularly interruptive
        if possible while giving a reasonable idea whether a real backup
        would succeed.

        If a backup would not succeed, a ``BackupError`` instance should
        be raised.

        :raises: BackupError
        """

    def post(self):
        """Run after a backup

        Free any resources held by this backup that should be freed at the
        end of every run.
        This method will be called even if ``backup()`` fails
        """

    def release(self):
        """Release resources held by this plugin

        If a backup plugin uses some resource as part of the backup
        process this method give it a chance to free that resource.
        This will be called prior to the backupstore being purged
        during a purge operation or as part an explicit release
        request as long as the backupstore plugin is loadable.

        This method does nothing by default and generally does not
        need to be overriden.  This exists primarily for snapshot
        style plugins that may create a snapshot as the primary means
        of backup and sometime later will be requested to release that
        snapshot.
        """

    #@classmethod
    def configspec(cls):
        """Provide standard backup configspec

        The base class defines the standard configspec that all
        backup configs will contain.

        This method should be overriden by a subclass and provide the
        configspec for that plugin, not including the [holland:backup]
        section.

        :returns: Configspec instance
        """
        return Configspec.from_string("""
        [holland:backup]
        plugin                  = string
        auto-purge-failures     = boolean(default=yes)
        purge-policy            = option("manual",
                                         "before-backup",
                                         "after-backup",
                                         default="after-backup")
        backups-to-keep         = integer(default=1, aliasof="retention-count")
        retention-count         = integer(default=1)
        estimated-size-factor   = float(default=1.0)
        estimation-method       = string(default="plugin")
        pre-backup-hook         = string(default=None)
        post-backup-hook        = string(default=None)
        backup-failure-hook     = string(default=None)
        hooks                   = list(default=list())
        """)
    configspec = classmethod(configspec)

class NoopBackupPlugin(BackupPlugin):
    """Backup plugin implementation that does nothing

    This plugin is used when a backup should perform no actions
    but otherwise should be successful.  This is also useful for
    certain unit tests used by holland.core.
    """
    def plugin_info(self):
        """Basic plugin info for the noop plugin"""
        return dict(
            name='noop',
            summary='A plugin that does nothing',
            description='''
            A simple plugin that does nothing and servers only as an example
            and a useful test foil.
            ''',
            author='Holland Core team',
            version='1.1.0',
            api_version='1.1.0',
        )
