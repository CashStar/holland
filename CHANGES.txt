=======
CHANGES
=======

2.0.0
-----

holland
+++++++

- holland now requires python 2.6 or above, but holland 2.0.0
  does not yet work with python3
- holland now has a few external dependencies:
    * python-argparse (or python2.7+)
    * python-sqlalchemy
    * MySQL-python    (required by holland-mysql)
    * python-jinja2   (required by holland-mysql)
- Plugins distributed with the holland source have now been significantly
  restructured:
    * plugins/mysql -> holland mysql support and base mysql plugins
                       (mysqldump,xtrabackup).
                       This is effectively merging holland.lib.mysql
                       holland.backup.mysqldump and holland.backup.xtrabackup
                       from previous holland releases, and serves as an
                       umbrella for common support of mysql backup strategies
    * plugins/lvm -> base holland LVM api support for manipulating 
                     volumes and a generic LVM snapshot plugin (mylvmsnapshot)
                     for backing up a logical volume via a snapshot.
                     This was largely handled by holland.lib.lvm in previous
                     holland releases
    * plugins/mysql-lvm -> LVM snapshot backups for MySQL databases.
                           This includes mysql-lvm and mysqldump-lvm.
                           Requires holland-mysql, holland-lvm
    * plugins/pgsql -> Postgres backup support.
                       This is just a forward port of holland-pgdump
                       from holland-1.0, and serves as an umbrella
                       package for future Postgres support.
- The holland command line interface has been split from holland.core 
  and is in its own holland.cli package under holland/cli
- holland's use of /etc/holland/providers/ has been deprecated. This
  was previously used to override plugin defaults for all backupsets
  but this has since been superceded by holland 2.0's %include config
  directive.  Holland 2.0.x will read a /etc/holland/providers/<plugin>.conf
  if it exists, but will not ship with any such configs by default.
  Generally you want to override defaults in /etc/holland/backupsets/
  and for advanced configurations use the more flexible %include directive.

holland.core
++++++++++++
- New plugin interface in holland.core.plugin
- New internal backup API in holland.core.backup
- Merged holland-1.0's holland.lib.common into holland.core
  * ``which`` now available via holland.core.util.path
  * compression streams now available via holland.core.stream api
- New archive API added to holland.core
  * This abstracts access to tar/cp/rsync/etc. archiver methods
    and adds an interface for implementing future archivers
- holland now saves backup metadata in .holland/ subdirectory under
  each bacup_directory.  Plugins may write their own metadata files
  under this location as well.  By default holland uses three files:
    .holland/config -> the original config used to generate this backup
    .holland/checksums -> checksums of all files generated by this backup
    .holland/status -> the status of this backup
- holland now locks backupsets via lock files generated under
    ${backup_directory}/${backupset}/.holland/lock.  Previously versions
    of holland would use advisory locking on the backupset files themselves
    which was unreliable.
- Checksums are now generated for all generated backup files.
    This is controlled by the [holland:backup] -> checksum-algorithm option
    which may be set to 'none' to disable checksums entirely. These are
    written in a format checkable by the various *sum commands
    (e.g.  md5sum, sha1sum, ....).  Checksums are stored under
    ${backup_directory}/${backupset}/${instance}/.holland/checksums
- holland now maintains a backup catalog.  This is a sqlite database
  stored by default under /var/lib/holland/catalog/holland.db.  This
  database maintains metadata about each backup that survives even
  when a backup itself is rotated.  This can be used to generate
  reports of recent failures and to coordinate with external archiving
  tools that may be using holland as a quiesce operation before
  archiving the backup files to some sort of long-term storage.
- holland.core now includes a 'noop' and 'script backup plugin.
  'noop' does nothing but is used by the testsuite to test the
  backup lifecycle.  'script' runs an arbitrary shell command
  as a backup.  See the holland documentation for more details.

holland.cli
+++++++++++

holland.mysql
+++++++++++++
- Internal APIs have all been rewritten
- Major rewrite of the mysqldump plugin 
- mysqldump now supports a 'mysqldump-strategy' option that controls
  how the mysqldump command is invoked.  This is one of:
    * all-databases - a single mysqldump invocation to dump all the
                      non-excluded databases and generates a single
                      all_databases.sql[.ext] file
    * file-per-database - a mysqldump command is invoked for each database
                          that is not excluded by inclusion/exclusion rules
                          and generatees a ${name}.sql[.ext] file per database
    * file-per-table - a mysqldump command is invoke for each non-excluded
                       table as ${database}/${table}.sql[.ext].  This
                       should only be used in conjunction with LVM or
                       by using the stop-slave option or an inconsistent
                       backup may result.
- significant cleanups of database/table discovery.  This should be much
  faster in holland 2.0 compared to holland 1.X due to the more efficient
  information_schema queries. The mysqldump plugin avoids hitting the
  information schema if there are no filtered tables and plugin estimation
  is not otherwise requested.

holland.lvm
+++++++++++
- Refactored volume API
- New plugin 'lvmsnapshot' added to 2.0 release

holland.mysql.lvm
+++++++++++++++++
- renamed mysql-lvm to mylvmsnapshot - mysql-lvm is an alias for this plugin
- renamed mysqldump-lvm to mylvmdump - mysqldump-lvm is an alias for this
  plugin
- mysql lvm plugins now attempt to remove old stale snapshots by default
- mylvmdump now supports using --master-data in the final mysqldump.
  See mylvmdump synchronize-binlogs option in the documentation for details.
